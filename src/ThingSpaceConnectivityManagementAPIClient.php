<?php
/*
 * ThingSpaceConnectivityManagementAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */

namespace ThingSpaceConnectivityManagementAPILib;

use ThingSpaceConnectivityManagementAPILib\Controllers;

/**
 * ThingSpaceConnectivityManagementAPILib client class
 */
class ThingSpaceConnectivityManagementAPIClient
{
    /**
     * Constructor with authentication and configuration parameters
     */
    public function __construct($apiKey = NULL)
    {
        Configuration::$apiKey = $apiKey ? $apiKey : Configuration::$apiKey;
    }
 
    /**
     * Singleton access to Sms controller
     * @return Controllers\SmsController The *Singleton* instance
     */
    public function getSms()
    {
        return Controllers\SmsController::getInstance();
    }
 
    /**
     * Singleton access to Session controller
     * @return Controllers\SessionController The *Singleton* instance
     */
    public function getSession()
    {
        return Controllers\SessionController::getInstance();
    }
 
    /**
     * Singleton access to Plans controller
     * @return Controllers\PlansController The *Singleton* instance
     */
    public function getPlans()
    {
        return Controllers\PlansController::getInstance();
    }
 
    /**
     * Singleton access to Leads controller
     * @return Controllers\LeadsController The *Singleton* instance
     */
    public function getLeads()
    {
        return Controllers\LeadsController::getInstance();
    }
 
    /**
     * Singleton access to Groups controller
     * @return Controllers\GroupsController The *Singleton* instance
     */
    public function getGroups()
    {
        return Controllers\GroupsController::getInstance();
    }
 
    /**
     * Singleton access to Devices controller
     * @return Controllers\DevicesController The *Singleton* instance
     */
    public function getDevices()
    {
        return Controllers\DevicesController::getInstance();
    }
 
    /**
     * Singleton access to Callbacks controller
     * @return Controllers\CallbacksController The *Singleton* instance
     */
    public function getCallbacks()
    {
        return Controllers\CallbacksController::getInstance();
    }
}