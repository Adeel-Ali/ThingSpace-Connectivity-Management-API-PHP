<?php
/*
 * ThingSpaceConnectivityManagementAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */

namespace ThingSpaceConnectivityManagementAPILib\Controllers;

use ThingSpaceConnectivityManagementAPILib\APIException;
use ThingSpaceConnectivityManagementAPILib\APIHelper;
use ThingSpaceConnectivityManagementAPILib\Configuration;
use ThingSpaceConnectivityManagementAPILib\Models;
use ThingSpaceConnectivityManagementAPILib\Exceptions;
use ThingSpaceConnectivityManagementAPILib\Http\HttpRequest;
use ThingSpaceConnectivityManagementAPILib\Http\HttpResponse;
use ThingSpaceConnectivityManagementAPILib\Http\HttpMethod;
use ThingSpaceConnectivityManagementAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class GroupsController extends BaseController {

    /**
     * @var GroupsController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return GroupsController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Deletes a device group. Devices in the group are moved to the default device group and are not deleted from the account.
     * @param  string     $vZM2MToken       Required parameter: M2M-MC Session Token
     * @param  string     $aname            Required parameter: Account name
     * @param  string     $gname            Required parameter: Group name
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteDeviceGroupUsingDELETE (
                $vZM2MToken,
                $aname,
                $gname) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/groups/{aname}/name/{gname}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'aname'        => $aname,
            'gname'        => $gname,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'api_key' => Configuration::$apiKey,
            'VZ-M2M-Token'    => $vZM2MToken
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\RestErrorResponseException('Error Response', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\RestSuccessResponse());
    }
        
    /**
     * Make changes to a device group, including changing the name and description, and adding or removing devices.
     * @param  Models\GroupUpdateRequest $request          Required parameter: Request
     * @param  string                 $aname            Required parameter: Account name
     * @param  string                 $gname            Required parameter: Group name
     * @param  string                 $vZM2MToken       Required parameter: M2M-MC Session Token
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateDeviceGroupUsingPUT (
                $request,
                $aname,
                $gname,
                $vZM2MToken) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/groups/{aname}/name/{gname}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'aname'        => $aname,
            'gname'        => $gname,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'api_key' => Configuration::$apiKey,
            'VZ-M2M-Token'    => $vZM2MToken
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($request));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\RestErrorResponseException('Error Response', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\RestSuccessResponse());
    }
        
    /**
     * Returns the name, description, and list of devices in a device group.
     * @param  string      $aname            Required parameter: Account name
     * @param  string      $gname            Required parameter: Group name
     * @param  string      $vZM2MToken       Required parameter: M2M-MC Session Token
     * @param  integer     $next             Optional parameter: Continue the previous query from the pageUrl pagetoken
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getDeviceGroupInfoUsingGET (
                $aname,
                $gname,
                $vZM2MToken,
                $next = NULL) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/groups/{aname}/name/{gname}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'aname'        => $aname,
            'gname'        => $gname,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'next'         => $next,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'api_key' => Configuration::$apiKey,
            'VZ-M2M-Token'    => $vZM2MToken
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\RestErrorResponseException('Error Response', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\GroupListResponse());
    }
        
    /**
     * Returns a list of device groups in an account
     * @param  string     $vZM2MToken       Required parameter: M2M-MC Session Token
     * @param  string     $aname            Required parameter: Account name
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getListUsingGET (
                $vZM2MToken,
                $aname) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/groups/{aname}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'aname'        => $aname,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'api_key' => Configuration::$apiKey,
            'VZ-M2M-Token'    => $vZM2MToken
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\RestErrorResponseException('Error Response', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->mapArray($response->body, array(), new Models\GroupResponse());
    }
        
    /**
     * Creates a new device group and optionally adds a set of devices to that group.
     * @param  Models\CreateDevGroupRequest $request          Required parameter: Request
     * @param  string                    $vZM2MToken       Required parameter: M2M-MC Session Token
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createDeviceGroupUsingPOST (
                $request,
                $vZM2MToken) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/groups';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'api_key' => Configuration::$apiKey,
            'VZ-M2M-Token'    => $vZM2MToken
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($request));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\RestErrorResponseException('Error Response', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\RestSuccessResponse());
    }
        

}